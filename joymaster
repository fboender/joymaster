#!/usr/bin/python
#
# Copyright 2005, Ferry Boender <f DOT boender AT electricmonk DOT nl>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# 
# Todo:
#  * Let user pick a window to controll.
#  * Let user set the display to connect to.
#

import sys
import logging
import optparse
import os
import ConfigParser 
import time

try:
	import Xlib.display
except ImportError, e:
	sys.stderr.write("Couldn't import Python Xlib module. Aborting.\n")
	sys.exit(1)

try:
	import JoyMaster.Joystick
	import JoyMaster.XEventSimulator
except ImportError, e:
	sys.stderr.write("Couldn't import JoyMaster modules. Please check your installation. Aborting.\n")
	sys.exit(1)

class JMControlWindow:

	def __init__(self):
		self.section_name = ""
		self.wm_class = ""
		self.wm_name = ""

		self.events = []

	def matchWindow(self, win_info):
		wm_class, wm_name = win_info

		if self.wm_class != None and self.wm_class != "" and self.wm_class.lower() in wm_class.lower():
			return(True)
		if self.wm_name != None and self.wm_name != "" and self.wm_name.lower() in wm_name.lower():
			return(True)

		return(False)
		
	def getEvents(self):
		return(self.events)

	def getEventByName(self, name):
		for event in self.events:
			if event.name == name:
				return(event)

		return(None)

	def dump(self):
		print ""
		print "section: %s" % (self.section_name)
		print "wm_class: %s" % (self.wm_class)
		print "wm_name: %s" % (self.wm_name)

		for event in self.events:
			event.dump()

class JMEvent:
	
	def __init__(self):
		self.name = ""

		self._joystick_event = ""
		self._simulate_event = []

	def dump(self):
		print "event %s" % (self.name)
		print "\tjoystick_event: %s" % (self._joystick_event)
		print "\tsimulate_event: %s" % (self._simulate_event)

	def setJoystickEventFromString(self, string):
		string = string.lower()
		parts = string.split(",")

		# Verify correctness of events
		for part in parts:
			if not (part in ("up","down","left","right") or part.isdigit()):
				return(False)
	
		self._joystick_event = parts

	def setSimulateEventFromString(self, string):
		
		# FIXME: Verify correctness of event by passing it to KeySimulator
		self._simulate_event = string.split(",")

	def getJoystickEvent(self):
		return(self._joystick_event)

	def getSimulateEvent(self):
		return(self._simulate_event)
		
class Main:

	def __init__(self, joydev, configfile):

		self.controlledWindows = []
		self.currentControlledWindow = None

		self.log = logging.getLogger("joymaster.main")
		self.__initDisplay(None)
		self.__initJoystick(joydev)
		self.__initKeySimulator()
		self.__initConfig(configfile)
		self.__initWindow()

		while True:
			
			window = self.__display.get_input_focus().focus
			if window != self.__window:
				self.__initWindow()
				self.log.debug("Window changed.")

			if self.joystick.hasEvents(1):
				triggered_events = self.joystick_trigger.getTriggered()

				self.log.debug("Received events: %s" % (triggered_events))

				for triggered_event in triggered_events:
					if self.__currentControlledWindow:
						ev = self.__currentControlledWindow.getEventByName(triggered_event)
						self.log.debug("Sending simulated event '%s' ( to window ''" % (triggered_event))
						self.keysimulator.sendEventSequence(ev.name)

	def __initJoystick(self, joydev):
		
		self.log.debug("Using joystick device %s." % (joydev))

		try:
			self.joystick = JoyMaster.Joystick.Joystick(joydev)
			self.joystick_trigger = JoyMaster.Joystick.Trigger(self.joystick)

			self.joydev = joydev
		except OSError, e:
			sys.stderr.write("Couldn't open joystick device %s.\n" % (joydev) )
			sys.exit(1)
	
	def __initDisplay(self, display = None):
	
		self.log.debug("Connecting to X display '%s'." % display)

		self.__display = Xlib.display.Display(display)
		
	def __initWindow(self, controlledWindow = None):
		
		if controlledWindow:
			# Find the X window matching controlledWindow and start controlling it
			raise NotImplementedError()
			pass
		else:
			# Use the currently focussed X window and see if we should control it.
			self.log.debug("Running in 'foccused' mode.")
			window = self.__display.get_input_focus().focus
			self.__window = window
			window_wm_class = ".".join(window.get_wm_class())
			window_wm_name = window.get_wm_name()

			self.keysimulator.setWindow(window)

			for controlledWindow in self.controlledWindows:
				if controlledWindow.matchWindow([window_wm_class, window_wm_name]):
					self.log.debug("Controlling window '%s' with name '%s'" % (window_wm_class, window_wm_name))
					self.__currentControlledWindow = controlledWindow

		if self.__currentControlledWindow:
			self.keysimulator.delEventSequences()
			events = self.__currentControlledWindow.getEvents()
			for event in events:
				x_events = self.keysimulator.stringsToXEvents(event.getSimulateEvent())
				self.keysimulator.addEventSequence(event.name, x_events)
				self.joystick_trigger.addTrigger(event.name, event.getJoystickEvent())
		else:
			self.log.debug("No valid window found to control.")

	def __initKeySimulator(self):
		
		self.log.debug("Initializing X event simulator.")
		
		self.keysimulator = JoyMaster.XEventSimulator.XEventSimulator(self.__display)

	def __initConfig(self, configfile = ""):
		
		try_configs = [
			configfile, 
			"joymaster.conf", 
			os.path.expanduser("~/.joymaster.conf")
		]

		self.log.debug("Trying to find configuration using: %s" % (try_configs));

		config = ConfigParser.ConfigParser()
		config.read(try_configs)

		if len(config.sections()) == 0:
			sys.stderr.write("No usable configs found or all configs are empty. Exiting.\n")
			sys.exit(1)

		for section in config.sections():
			try:
				cw = JMControlWindow()

				cw.section_name = section

				for item in config.items(section):
					item_key, item_value = item

					if item_key == "wm_class":
						cw.wm_class = item_value
					elif item_key == "wm_name":
						cw.wm_name = item_value
					else:
						joystick_event, simulate_event = item_value.split(":")

						event = JMEvent()

						event.name = item_key
						event.setJoystickEventFromString(joystick_event)
						event.setSimulateEventFromString(simulate_event)

						cw.events.append(event)

						self.log.debug("Added '%s' event to '%s' window controller." % (event.name, cw.section_name))

				self.controlledWindows.append(cw)
				self.log.debug("Added window controller '%s' to controlled windows." % (cw.section_name))
			except:
				sys.stderr.write("Invalid configuration section '%s'\n" % (section))

if __name__ == "__main__":

	try:
		# Logging
		logging.basicConfig()
		log = logging.getLogger("joymaster")
		log.setLevel(logging.WARN)

		# Parse commandline options
		parser = optparse.OptionParser()
		parser.set_usage(sys.argv[0] + " [option]")

		parser.add_option("-c", "--config", action="store", type="string", metavar="PATH", dest="configfile", help="Config file to use.", default="")
		parser.add_option("-d", "--device", action="store", type="string", metavar="DEVICE", dest="joydev", help="Joystick device.", default="/dev/js0")
		parser.add_option("-V", "--verbose", action="store_true",dest="verbose", help="Be verbose (show lots of output)", default=False)

		(options, args) = parser.parse_args()

		if options.verbose:
			log.setLevel(logging.DEBUG)

		Main(options.joydev, options.configfile)
	except KeyboardInterrupt, e:
		log.debug("Received keyboard interrupt. Shutting down")
		sys.exit(0)

